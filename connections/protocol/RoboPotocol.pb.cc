// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RoboIDE2/mur-ide/connections/protocol/RoboPotocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RoboPotocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RoboProtocol {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Command_Value_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BinaryPreamble_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryPreamble_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryChunk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryChunk_reflection_ = NULL;
const ::google::protobuf::Descriptor* BinaryEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BinaryEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangePassword_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangePassword_reflection_ = NULL;
const ::google::protobuf::Descriptor* SendBluetoothMAC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SendBluetoothMAC_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusInfoRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusInfoRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Result_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Result_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Result_Value_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto() {
  protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RoboIDE2/mur-ide/connections/protocol/RoboPotocol.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[1] = {
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  Command_Value_descriptor_ = Command_descriptor_->enum_type(0);
  BinaryPreamble_descriptor_ = file->message_type(1);
  static const int BinaryPreamble_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPreamble, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPreamble, binarysize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPreamble, chunksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPreamble, binarycrc_),
  };
  BinaryPreamble_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryPreamble_descriptor_,
      BinaryPreamble::default_instance_,
      BinaryPreamble_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPreamble, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryPreamble, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryPreamble));
  BinaryChunk_descriptor_ = file->message_type(2);
  static const int BinaryChunk_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryChunk, chunknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryChunk, chunk_),
  };
  BinaryChunk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryChunk_descriptor_,
      BinaryChunk::default_instance_,
      BinaryChunk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryChunk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryChunk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryChunk));
  BinaryEnd_descriptor_ = file->message_type(3);
  static const int BinaryEnd_offsets_[1] = {
  };
  BinaryEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BinaryEnd_descriptor_,
      BinaryEnd::default_instance_,
      BinaryEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BinaryEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BinaryEnd));
  ChangeName_descriptor_ = file->message_type(4);
  static const int ChangeName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, name_),
  };
  ChangeName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeName_descriptor_,
      ChangeName::default_instance_,
      ChangeName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeName));
  ChangePassword_descriptor_ = file->message_type(5);
  static const int ChangePassword_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePassword, password_),
  };
  ChangePassword_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangePassword_descriptor_,
      ChangePassword::default_instance_,
      ChangePassword_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePassword, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangePassword, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangePassword));
  SendBluetoothMAC_descriptor_ = file->message_type(6);
  static const int SendBluetoothMAC_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBluetoothMAC, bluetoothmac_),
  };
  SendBluetoothMAC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SendBluetoothMAC_descriptor_,
      SendBluetoothMAC::default_instance_,
      SendBluetoothMAC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBluetoothMAC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendBluetoothMAC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SendBluetoothMAC));
  StatusInfoRequest_descriptor_ = file->message_type(7);
  static const int StatusInfoRequest_offsets_[1] = {
  };
  StatusInfoRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusInfoRequest_descriptor_,
      StatusInfoRequest::default_instance_,
      StatusInfoRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfoRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfoRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusInfoRequest));
  StatusInfo_descriptor_ = file->message_type(8);
  static const int StatusInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, devicenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, devices_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, leak_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, cameras_),
  };
  StatusInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusInfo_descriptor_,
      StatusInfo::default_instance_,
      StatusInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusInfo));
  Result_descriptor_ = file->message_type(9);
  static const int Result_offsets_[1] = {
  };
  Result_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Result_descriptor_,
      Result::default_instance_,
      Result_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Result, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Result));
  Result_Value_descriptor_ = Result_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryPreamble_descriptor_, &BinaryPreamble::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryChunk_descriptor_, &BinaryChunk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BinaryEnd_descriptor_, &BinaryEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeName_descriptor_, &ChangeName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangePassword_descriptor_, &ChangePassword::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendBluetoothMAC_descriptor_, &SendBluetoothMAC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusInfoRequest_descriptor_, &StatusInfoRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusInfo_descriptor_, &StatusInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Result_descriptor_, &Result::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete BinaryPreamble::default_instance_;
  delete BinaryPreamble_reflection_;
  delete BinaryChunk::default_instance_;
  delete BinaryChunk_reflection_;
  delete BinaryEnd::default_instance_;
  delete BinaryEnd_reflection_;
  delete ChangeName::default_instance_;
  delete ChangeName_reflection_;
  delete ChangePassword::default_instance_;
  delete ChangePassword_reflection_;
  delete SendBluetoothMAC::default_instance_;
  delete SendBluetoothMAC_reflection_;
  delete StatusInfoRequest::default_instance_;
  delete StatusInfoRequest_reflection_;
  delete StatusInfo::default_instance_;
  delete StatusInfo_reflection_;
  delete Result::default_instance_;
  delete Result_reflection_;
}

void protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n7RoboIDE2/mur-ide/connections/protocol/"
    "RoboPotocol.proto\022\014RoboProtocol\"%\n\007Comma"
    "nd\"\032\n\005Value\022\007\n\003RUN\020\000\022\010\n\004KILL\020\001\"X\n\016Binary"
    "Preamble\022\014\n\004name\030\001 \002(\t\022\022\n\nbinarySize\030\002 \002"
    "(\r\022\021\n\tchunkSize\030\003 \002(\r\022\021\n\tbinaryCRC\030\004 \002(\r"
    "\"1\n\013BinaryChunk\022\023\n\013chunkNumber\030\001 \002(\r\022\r\n\005"
    "chunk\030\002 \002(\014\"\013\n\tBinaryEnd\"\032\n\nChangeName\022\014"
    "\n\004name\030\001 \002(\t\"\"\n\016ChangePassword\022\020\n\010passwo"
    "rd\030\001 \002(\t\"(\n\020SendBluetoothMAC\022\024\n\014bluetoot"
    "hMAC\030\001 \002(\t\"\023\n\021StatusInfoRequest\"\231\001\n\nStat"
    "usInfo\022\021\n\tdeviceNum\030\001 \002(\r\022\017\n\007Devices\030\002 \002"
    "(\014\022\013\n\003yaw\030\003 \002(\002\022\r\n\005pitch\030\004 \002(\002\022\014\n\004roll\030\005"
    " \002(\002\022\r\n\005depth\030\006 \002(\002\022\014\n\004leak\030\007 \002(\r\022\017\n\007ver"
    "sion\030\010 \002(\r\022\017\n\007cameras\030\t \002(\r\")\n\006Result\"\037\n"
    "\005Value\022\013\n\007SUCCESS\020\001\022\t\n\005ERROR\020\002", 590);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RoboIDE2/mur-ide/connections/protocol/RoboPotocol.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  BinaryPreamble::default_instance_ = new BinaryPreamble();
  BinaryChunk::default_instance_ = new BinaryChunk();
  BinaryEnd::default_instance_ = new BinaryEnd();
  ChangeName::default_instance_ = new ChangeName();
  ChangePassword::default_instance_ = new ChangePassword();
  SendBluetoothMAC::default_instance_ = new SendBluetoothMAC();
  StatusInfoRequest::default_instance_ = new StatusInfoRequest();
  StatusInfo::default_instance_ = new StatusInfo();
  Result::default_instance_ = new Result();
  Command::default_instance_->InitAsDefaultInstance();
  BinaryPreamble::default_instance_->InitAsDefaultInstance();
  BinaryChunk::default_instance_->InitAsDefaultInstance();
  BinaryEnd::default_instance_->InitAsDefaultInstance();
  ChangeName::default_instance_->InitAsDefaultInstance();
  ChangePassword::default_instance_->InitAsDefaultInstance();
  SendBluetoothMAC::default_instance_->InitAsDefaultInstance();
  StatusInfoRequest::default_instance_->InitAsDefaultInstance();
  StatusInfo::default_instance_->InitAsDefaultInstance();
  Result::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto {
  StaticDescriptorInitializer_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto() {
    protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  }
} static_descriptor_initializer_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Command_Value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_Value_descriptor_;
}
bool Command_Value_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Command_Value Command::RUN;
const Command_Value Command::KILL;
const Command_Value Command::Value_MIN;
const Command_Value Command::Value_MAX;
const int Command::Value_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.Command)
}

void Command::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:RoboProtocol.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.Command)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.Command)
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.Command)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.Command)
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryPreamble::kNameFieldNumber;
const int BinaryPreamble::kBinarySizeFieldNumber;
const int BinaryPreamble::kChunkSizeFieldNumber;
const int BinaryPreamble::kBinaryCRCFieldNumber;
#endif  // !_MSC_VER

BinaryPreamble::BinaryPreamble()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.BinaryPreamble)
}

void BinaryPreamble::InitAsDefaultInstance() {
}

BinaryPreamble::BinaryPreamble(const BinaryPreamble& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.BinaryPreamble)
}

void BinaryPreamble::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  binarysize_ = 0u;
  chunksize_ = 0u;
  binarycrc_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryPreamble::~BinaryPreamble() {
  // @@protoc_insertion_point(destructor:RoboProtocol.BinaryPreamble)
  SharedDtor();
}

void BinaryPreamble::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BinaryPreamble::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryPreamble::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryPreamble_descriptor_;
}

const BinaryPreamble& BinaryPreamble::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

BinaryPreamble* BinaryPreamble::default_instance_ = NULL;

BinaryPreamble* BinaryPreamble::New() const {
  return new BinaryPreamble;
}

void BinaryPreamble::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BinaryPreamble*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(binarysize_, binarycrc_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryPreamble::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.BinaryPreamble)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_binarySize;
        break;
      }

      // required uint32 binarySize = 2;
      case 2: {
        if (tag == 16) {
         parse_binarySize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binarysize_)));
          set_has_binarysize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_chunkSize;
        break;
      }

      // required uint32 chunkSize = 3;
      case 3: {
        if (tag == 24) {
         parse_chunkSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunksize_)));
          set_has_chunksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_binaryCRC;
        break;
      }

      // required uint32 binaryCRC = 4;
      case 4: {
        if (tag == 32) {
         parse_binaryCRC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &binarycrc_)));
          set_has_binarycrc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.BinaryPreamble)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.BinaryPreamble)
  return false;
#undef DO_
}

void BinaryPreamble::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.BinaryPreamble)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required uint32 binarySize = 2;
  if (has_binarysize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->binarysize(), output);
  }

  // required uint32 chunkSize = 3;
  if (has_chunksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->chunksize(), output);
  }

  // required uint32 binaryCRC = 4;
  if (has_binarycrc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->binarycrc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.BinaryPreamble)
}

::google::protobuf::uint8* BinaryPreamble::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.BinaryPreamble)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 binarySize = 2;
  if (has_binarysize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->binarysize(), target);
  }

  // required uint32 chunkSize = 3;
  if (has_chunksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->chunksize(), target);
  }

  // required uint32 binaryCRC = 4;
  if (has_binarycrc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->binarycrc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.BinaryPreamble)
  return target;
}

int BinaryPreamble::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 binarySize = 2;
    if (has_binarysize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binarysize());
    }

    // required uint32 chunkSize = 3;
    if (has_chunksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunksize());
    }

    // required uint32 binaryCRC = 4;
    if (has_binarycrc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->binarycrc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryPreamble::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryPreamble* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryPreamble*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryPreamble::MergeFrom(const BinaryPreamble& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_binarysize()) {
      set_binarysize(from.binarysize());
    }
    if (from.has_chunksize()) {
      set_chunksize(from.chunksize());
    }
    if (from.has_binarycrc()) {
      set_binarycrc(from.binarycrc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryPreamble::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryPreamble::CopyFrom(const BinaryPreamble& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryPreamble::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BinaryPreamble::Swap(BinaryPreamble* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(binarysize_, other->binarysize_);
    std::swap(chunksize_, other->chunksize_);
    std::swap(binarycrc_, other->binarycrc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryPreamble::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryPreamble_descriptor_;
  metadata.reflection = BinaryPreamble_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BinaryChunk::kChunkNumberFieldNumber;
const int BinaryChunk::kChunkFieldNumber;
#endif  // !_MSC_VER

BinaryChunk::BinaryChunk()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.BinaryChunk)
}

void BinaryChunk::InitAsDefaultInstance() {
}

BinaryChunk::BinaryChunk(const BinaryChunk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.BinaryChunk)
}

void BinaryChunk::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  chunknumber_ = 0u;
  chunk_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryChunk::~BinaryChunk() {
  // @@protoc_insertion_point(destructor:RoboProtocol.BinaryChunk)
  SharedDtor();
}

void BinaryChunk::SharedDtor() {
  if (chunk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete chunk_;
  }
  if (this != default_instance_) {
  }
}

void BinaryChunk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryChunk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryChunk_descriptor_;
}

const BinaryChunk& BinaryChunk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

BinaryChunk* BinaryChunk::default_instance_ = NULL;

BinaryChunk* BinaryChunk::New() const {
  return new BinaryChunk;
}

void BinaryChunk::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    chunknumber_ = 0u;
    if (has_chunk()) {
      if (chunk_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        chunk_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.BinaryChunk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 chunkNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &chunknumber_)));
          set_has_chunknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_chunk;
        break;
      }

      // required bytes chunk = 2;
      case 2: {
        if (tag == 18) {
         parse_chunk:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chunk()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.BinaryChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.BinaryChunk)
  return false;
#undef DO_
}

void BinaryChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.BinaryChunk)
  // required uint32 chunkNumber = 1;
  if (has_chunknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->chunknumber(), output);
  }

  // required bytes chunk = 2;
  if (has_chunk()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->chunk(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.BinaryChunk)
}

::google::protobuf::uint8* BinaryChunk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.BinaryChunk)
  // required uint32 chunkNumber = 1;
  if (has_chunknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->chunknumber(), target);
  }

  // required bytes chunk = 2;
  if (has_chunk()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->chunk(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.BinaryChunk)
  return target;
}

int BinaryChunk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 chunkNumber = 1;
    if (has_chunknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->chunknumber());
    }

    // required bytes chunk = 2;
    if (has_chunk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chunk());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryChunk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryChunk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryChunk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryChunk::MergeFrom(const BinaryChunk& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_chunknumber()) {
      set_chunknumber(from.chunknumber());
    }
    if (from.has_chunk()) {
      set_chunk(from.chunk());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryChunk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryChunk::CopyFrom(const BinaryChunk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryChunk::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BinaryChunk::Swap(BinaryChunk* other) {
  if (other != this) {
    std::swap(chunknumber_, other->chunknumber_);
    std::swap(chunk_, other->chunk_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryChunk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryChunk_descriptor_;
  metadata.reflection = BinaryChunk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

BinaryEnd::BinaryEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.BinaryEnd)
}

void BinaryEnd::InitAsDefaultInstance() {
}

BinaryEnd::BinaryEnd(const BinaryEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.BinaryEnd)
}

void BinaryEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BinaryEnd::~BinaryEnd() {
  // @@protoc_insertion_point(destructor:RoboProtocol.BinaryEnd)
  SharedDtor();
}

void BinaryEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BinaryEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BinaryEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BinaryEnd_descriptor_;
}

const BinaryEnd& BinaryEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

BinaryEnd* BinaryEnd::default_instance_ = NULL;

BinaryEnd* BinaryEnd::New() const {
  return new BinaryEnd;
}

void BinaryEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BinaryEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.BinaryEnd)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.BinaryEnd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.BinaryEnd)
  return false;
#undef DO_
}

void BinaryEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.BinaryEnd)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.BinaryEnd)
}

::google::protobuf::uint8* BinaryEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.BinaryEnd)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.BinaryEnd)
  return target;
}

int BinaryEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BinaryEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BinaryEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BinaryEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BinaryEnd::MergeFrom(const BinaryEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BinaryEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BinaryEnd::CopyFrom(const BinaryEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinaryEnd::IsInitialized() const {

  return true;
}

void BinaryEnd::Swap(BinaryEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BinaryEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BinaryEnd_descriptor_;
  metadata.reflection = BinaryEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeName::kNameFieldNumber;
#endif  // !_MSC_VER

ChangeName::ChangeName()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.ChangeName)
}

void ChangeName::InitAsDefaultInstance() {
}

ChangeName::ChangeName(const ChangeName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.ChangeName)
}

void ChangeName::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeName::~ChangeName() {
  // @@protoc_insertion_point(destructor:RoboProtocol.ChangeName)
  SharedDtor();
}

void ChangeName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ChangeName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeName_descriptor_;
}

const ChangeName& ChangeName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

ChangeName* ChangeName::default_instance_ = NULL;

ChangeName* ChangeName::New() const {
  return new ChangeName;
}

void ChangeName::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.ChangeName)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.ChangeName)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.ChangeName)
  return false;
#undef DO_
}

void ChangeName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.ChangeName)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.ChangeName)
}

::google::protobuf::uint8* ChangeName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.ChangeName)
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.ChangeName)
  return target;
}

int ChangeName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeName::MergeFrom(const ChangeName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeName::CopyFrom(const ChangeName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeName::Swap(ChangeName* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeName_descriptor_;
  metadata.reflection = ChangeName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangePassword::kPasswordFieldNumber;
#endif  // !_MSC_VER

ChangePassword::ChangePassword()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.ChangePassword)
}

void ChangePassword::InitAsDefaultInstance() {
}

ChangePassword::ChangePassword(const ChangePassword& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.ChangePassword)
}

void ChangePassword::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangePassword::~ChangePassword() {
  // @@protoc_insertion_point(destructor:RoboProtocol.ChangePassword)
  SharedDtor();
}

void ChangePassword::SharedDtor() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ChangePassword::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangePassword::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangePassword_descriptor_;
}

const ChangePassword& ChangePassword::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

ChangePassword* ChangePassword::default_instance_ = NULL;

ChangePassword* ChangePassword::New() const {
  return new ChangePassword;
}

void ChangePassword::Clear() {
  if (has_password()) {
    if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      password_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangePassword::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.ChangePassword)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string password = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.ChangePassword)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.ChangePassword)
  return false;
#undef DO_
}

void ChangePassword::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.ChangePassword)
  // required string password = 1;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->password(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.ChangePassword)
}

::google::protobuf::uint8* ChangePassword::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.ChangePassword)
  // required string password = 1;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->password(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.ChangePassword)
  return target;
}

int ChangePassword::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string password = 1;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangePassword::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangePassword* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangePassword*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangePassword::MergeFrom(const ChangePassword& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_password()) {
      set_password(from.password());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangePassword::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangePassword::CopyFrom(const ChangePassword& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangePassword::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangePassword::Swap(ChangePassword* other) {
  if (other != this) {
    std::swap(password_, other->password_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangePassword::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangePassword_descriptor_;
  metadata.reflection = ChangePassword_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendBluetoothMAC::kBluetoothMACFieldNumber;
#endif  // !_MSC_VER

SendBluetoothMAC::SendBluetoothMAC()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.SendBluetoothMAC)
}

void SendBluetoothMAC::InitAsDefaultInstance() {
}

SendBluetoothMAC::SendBluetoothMAC(const SendBluetoothMAC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.SendBluetoothMAC)
}

void SendBluetoothMAC::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  bluetoothmac_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendBluetoothMAC::~SendBluetoothMAC() {
  // @@protoc_insertion_point(destructor:RoboProtocol.SendBluetoothMAC)
  SharedDtor();
}

void SendBluetoothMAC::SharedDtor() {
  if (bluetoothmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bluetoothmac_;
  }
  if (this != default_instance_) {
  }
}

void SendBluetoothMAC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendBluetoothMAC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendBluetoothMAC_descriptor_;
}

const SendBluetoothMAC& SendBluetoothMAC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

SendBluetoothMAC* SendBluetoothMAC::default_instance_ = NULL;

SendBluetoothMAC* SendBluetoothMAC::New() const {
  return new SendBluetoothMAC;
}

void SendBluetoothMAC::Clear() {
  if (has_bluetoothmac()) {
    if (bluetoothmac_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      bluetoothmac_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendBluetoothMAC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.SendBluetoothMAC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string bluetoothMAC = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bluetoothmac()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bluetoothmac().data(), this->bluetoothmac().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bluetoothmac");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.SendBluetoothMAC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.SendBluetoothMAC)
  return false;
#undef DO_
}

void SendBluetoothMAC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.SendBluetoothMAC)
  // required string bluetoothMAC = 1;
  if (has_bluetoothmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothmac().data(), this->bluetoothmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bluetoothmac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->bluetoothmac(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.SendBluetoothMAC)
}

::google::protobuf::uint8* SendBluetoothMAC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.SendBluetoothMAC)
  // required string bluetoothMAC = 1;
  if (has_bluetoothmac()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bluetoothmac().data(), this->bluetoothmac().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bluetoothmac");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->bluetoothmac(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.SendBluetoothMAC)
  return target;
}

int SendBluetoothMAC::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string bluetoothMAC = 1;
    if (has_bluetoothmac()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bluetoothmac());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendBluetoothMAC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendBluetoothMAC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SendBluetoothMAC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendBluetoothMAC::MergeFrom(const SendBluetoothMAC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bluetoothmac()) {
      set_bluetoothmac(from.bluetoothmac());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendBluetoothMAC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendBluetoothMAC::CopyFrom(const SendBluetoothMAC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendBluetoothMAC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SendBluetoothMAC::Swap(SendBluetoothMAC* other) {
  if (other != this) {
    std::swap(bluetoothmac_, other->bluetoothmac_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SendBluetoothMAC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SendBluetoothMAC_descriptor_;
  metadata.reflection = SendBluetoothMAC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StatusInfoRequest::StatusInfoRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.StatusInfoRequest)
}

void StatusInfoRequest::InitAsDefaultInstance() {
}

StatusInfoRequest::StatusInfoRequest(const StatusInfoRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.StatusInfoRequest)
}

void StatusInfoRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusInfoRequest::~StatusInfoRequest() {
  // @@protoc_insertion_point(destructor:RoboProtocol.StatusInfoRequest)
  SharedDtor();
}

void StatusInfoRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StatusInfoRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusInfoRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfoRequest_descriptor_;
}

const StatusInfoRequest& StatusInfoRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

StatusInfoRequest* StatusInfoRequest::default_instance_ = NULL;

StatusInfoRequest* StatusInfoRequest::New() const {
  return new StatusInfoRequest;
}

void StatusInfoRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusInfoRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.StatusInfoRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.StatusInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.StatusInfoRequest)
  return false;
#undef DO_
}

void StatusInfoRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.StatusInfoRequest)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.StatusInfoRequest)
}

::google::protobuf::uint8* StatusInfoRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.StatusInfoRequest)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.StatusInfoRequest)
  return target;
}

int StatusInfoRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusInfoRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusInfoRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusInfoRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusInfoRequest::MergeFrom(const StatusInfoRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusInfoRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfoRequest::CopyFrom(const StatusInfoRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfoRequest::IsInitialized() const {

  return true;
}

void StatusInfoRequest::Swap(StatusInfoRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusInfoRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusInfoRequest_descriptor_;
  metadata.reflection = StatusInfoRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusInfo::kDeviceNumFieldNumber;
const int StatusInfo::kDevicesFieldNumber;
const int StatusInfo::kYawFieldNumber;
const int StatusInfo::kPitchFieldNumber;
const int StatusInfo::kRollFieldNumber;
const int StatusInfo::kDepthFieldNumber;
const int StatusInfo::kLeakFieldNumber;
const int StatusInfo::kVersionFieldNumber;
const int StatusInfo::kCamerasFieldNumber;
#endif  // !_MSC_VER

StatusInfo::StatusInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.StatusInfo)
}

void StatusInfo::InitAsDefaultInstance() {
}

StatusInfo::StatusInfo(const StatusInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.StatusInfo)
}

void StatusInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  devicenum_ = 0u;
  devices_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  yaw_ = 0;
  pitch_ = 0;
  roll_ = 0;
  depth_ = 0;
  leak_ = 0u;
  version_ = 0u;
  cameras_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusInfo::~StatusInfo() {
  // @@protoc_insertion_point(destructor:RoboProtocol.StatusInfo)
  SharedDtor();
}

void StatusInfo::SharedDtor() {
  if (devices_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete devices_;
  }
  if (this != default_instance_) {
  }
}

void StatusInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusInfo_descriptor_;
}

const StatusInfo& StatusInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

StatusInfo* StatusInfo::default_instance_ = NULL;

StatusInfo* StatusInfo::New() const {
  return new StatusInfo;
}

void StatusInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StatusInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(devicenum_, version_);
    if (has_devices()) {
      if (devices_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        devices_->clear();
      }
    }
  }
  cameras_ = 0u;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.StatusInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 deviceNum = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &devicenum_)));
          set_has_devicenum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Devices;
        break;
      }

      // required bytes Devices = 2;
      case 2: {
        if (tag == 18) {
         parse_Devices:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_devices()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_yaw;
        break;
      }

      // required float yaw = 3;
      case 3: {
        if (tag == 29) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_pitch;
        break;
      }

      // required float pitch = 4;
      case 4: {
        if (tag == 37) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_roll;
        break;
      }

      // required float roll = 5;
      case 5: {
        if (tag == 45) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_depth;
        break;
      }

      // required float depth = 6;
      case 6: {
        if (tag == 53) {
         parse_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &depth_)));
          set_has_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_leak;
        break;
      }

      // required uint32 leak = 7;
      case 7: {
        if (tag == 56) {
         parse_leak:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leak_)));
          set_has_leak();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_version;
        break;
      }

      // required uint32 version = 8;
      case 8: {
        if (tag == 64) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_cameras;
        break;
      }

      // required uint32 cameras = 9;
      case 9: {
        if (tag == 72) {
         parse_cameras:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cameras_)));
          set_has_cameras();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.StatusInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.StatusInfo)
  return false;
#undef DO_
}

void StatusInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.StatusInfo)
  // required uint32 deviceNum = 1;
  if (has_devicenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->devicenum(), output);
  }

  // required bytes Devices = 2;
  if (has_devices()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->devices(), output);
  }

  // required float yaw = 3;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->yaw(), output);
  }

  // required float pitch = 4;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->pitch(), output);
  }

  // required float roll = 5;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->roll(), output);
  }

  // required float depth = 6;
  if (has_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->depth(), output);
  }

  // required uint32 leak = 7;
  if (has_leak()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->leak(), output);
  }

  // required uint32 version = 8;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->version(), output);
  }

  // required uint32 cameras = 9;
  if (has_cameras()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->cameras(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.StatusInfo)
}

::google::protobuf::uint8* StatusInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.StatusInfo)
  // required uint32 deviceNum = 1;
  if (has_devicenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->devicenum(), target);
  }

  // required bytes Devices = 2;
  if (has_devices()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->devices(), target);
  }

  // required float yaw = 3;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->yaw(), target);
  }

  // required float pitch = 4;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->pitch(), target);
  }

  // required float roll = 5;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->roll(), target);
  }

  // required float depth = 6;
  if (has_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->depth(), target);
  }

  // required uint32 leak = 7;
  if (has_leak()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->leak(), target);
  }

  // required uint32 version = 8;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->version(), target);
  }

  // required uint32 cameras = 9;
  if (has_cameras()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->cameras(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.StatusInfo)
  return target;
}

int StatusInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 deviceNum = 1;
    if (has_devicenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->devicenum());
    }

    // required bytes Devices = 2;
    if (has_devices()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->devices());
    }

    // required float yaw = 3;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

    // required float pitch = 4;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // required float roll = 5;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // required float depth = 6;
    if (has_depth()) {
      total_size += 1 + 4;
    }

    // required uint32 leak = 7;
    if (has_leak()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leak());
    }

    // required uint32 version = 8;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->version());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 cameras = 9;
    if (has_cameras()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cameras());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusInfo::MergeFrom(const StatusInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_devicenum()) {
      set_devicenum(from.devicenum());
    }
    if (from.has_devices()) {
      set_devices(from.devices());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_depth()) {
      set_depth(from.depth());
    }
    if (from.has_leak()) {
      set_leak(from.leak());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cameras()) {
      set_cameras(from.cameras());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusInfo::CopyFrom(const StatusInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void StatusInfo::Swap(StatusInfo* other) {
  if (other != this) {
    std::swap(devicenum_, other->devicenum_);
    std::swap(devices_, other->devices_);
    std::swap(yaw_, other->yaw_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(depth_, other->depth_);
    std::swap(leak_, other->leak_);
    std::swap(version_, other->version_);
    std::swap(cameras_, other->cameras_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusInfo_descriptor_;
  metadata.reflection = StatusInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Result_Value_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_Value_descriptor_;
}
bool Result_Value_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Result_Value Result::SUCCESS;
const Result_Value Result::ERROR;
const Result_Value Result::Value_MIN;
const Result_Value Result::Value_MAX;
const int Result::Value_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Result::Result()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RoboProtocol.Result)
}

void Result::InitAsDefaultInstance() {
}

Result::Result(const Result& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RoboProtocol.Result)
}

void Result::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Result::~Result() {
  // @@protoc_insertion_point(destructor:RoboProtocol.Result)
  SharedDtor();
}

void Result::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Result::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Result::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Result_descriptor_;
}

const Result& Result::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RoboIDE2_2fmur_2dide_2fconnections_2fprotocol_2fRoboPotocol_2eproto();
  return *default_instance_;
}

Result* Result::default_instance_ = NULL;

Result* Result::New() const {
  return new Result;
}

void Result::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Result::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RoboProtocol.Result)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:RoboProtocol.Result)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RoboProtocol.Result)
  return false;
#undef DO_
}

void Result::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RoboProtocol.Result)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RoboProtocol.Result)
}

::google::protobuf::uint8* Result::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RoboProtocol.Result)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RoboProtocol.Result)
  return target;
}

int Result::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Result::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Result* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Result*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Result::MergeFrom(const Result& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Result::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Result::CopyFrom(const Result& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Result::IsInitialized() const {

  return true;
}

void Result::Swap(Result* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Result::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Result_descriptor_;
  metadata.reflection = Result_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RoboProtocol

// @@protoc_insertion_point(global_scope)
